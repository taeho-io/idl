// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slasher/slasher.proto

package slasher // import "github.com/taeho-io/idl/gen/go/slasher"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SlashRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlashRequest) Reset()         { *m = SlashRequest{} }
func (m *SlashRequest) String() string { return proto.CompactTextString(m) }
func (*SlashRequest) ProtoMessage()    {}
func (*SlashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_slasher_c7abb2075ad22bf0, []int{0}
}
func (m *SlashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlashRequest.Unmarshal(m, b)
}
func (m *SlashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlashRequest.Marshal(b, m, deterministic)
}
func (dst *SlashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashRequest.Merge(dst, src)
}
func (m *SlashRequest) XXX_Size() int {
	return xxx_messageInfo_SlashRequest.Size(m)
}
func (m *SlashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SlashRequest proto.InternalMessageInfo

func (m *SlashRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SlashResponse struct {
	SlashedText          string   `protobuf:"bytes,1,opt,name=slashed_text,json=slashedText,proto3" json:"slashed_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlashResponse) Reset()         { *m = SlashResponse{} }
func (m *SlashResponse) String() string { return proto.CompactTextString(m) }
func (*SlashResponse) ProtoMessage()    {}
func (*SlashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_slasher_c7abb2075ad22bf0, []int{1}
}
func (m *SlashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlashResponse.Unmarshal(m, b)
}
func (m *SlashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlashResponse.Marshal(b, m, deterministic)
}
func (dst *SlashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashResponse.Merge(dst, src)
}
func (m *SlashResponse) XXX_Size() int {
	return xxx_messageInfo_SlashResponse.Size(m)
}
func (m *SlashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SlashResponse proto.InternalMessageInfo

func (m *SlashResponse) GetSlashedText() string {
	if m != nil {
		return m.SlashedText
	}
	return ""
}

func init() {
	proto.RegisterType((*SlashRequest)(nil), "slasher.SlashRequest")
	proto.RegisterType((*SlashResponse)(nil), "slasher.SlashResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SlasherClient is the client API for Slasher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlasherClient interface {
	Slash(ctx context.Context, in *SlashRequest, opts ...grpc.CallOption) (*SlashResponse, error)
}

type slasherClient struct {
	cc *grpc.ClientConn
}

func NewSlasherClient(cc *grpc.ClientConn) SlasherClient {
	return &slasherClient{cc}
}

func (c *slasherClient) Slash(ctx context.Context, in *SlashRequest, opts ...grpc.CallOption) (*SlashResponse, error) {
	out := new(SlashResponse)
	err := c.cc.Invoke(ctx, "/slasher.Slasher/Slash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlasherServer is the server API for Slasher service.
type SlasherServer interface {
	Slash(context.Context, *SlashRequest) (*SlashResponse, error)
}

func RegisterSlasherServer(s *grpc.Server, srv SlasherServer) {
	s.RegisterService(&_Slasher_serviceDesc, srv)
}

func _Slasher_Slash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlasherServer).Slash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slasher.Slasher/Slash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlasherServer).Slash(ctx, req.(*SlashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slasher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slasher.Slasher",
	HandlerType: (*SlasherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Slash",
			Handler:    _Slasher_Slash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slasher/slasher.proto",
}

func init() { proto.RegisterFile("slasher/slasher.proto", fileDescriptor_slasher_c7abb2075ad22bf0) }

var fileDescriptor_slasher_c7abb2075ad22bf0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xce, 0x49, 0x2c,
	0xce, 0x48, 0x2d, 0xd2, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xec, 0x50, 0xae,
	0x92, 0x12, 0x17, 0x4f, 0x30, 0x88, 0x19, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc4,
	0xc5, 0x52, 0x92, 0x5a, 0x51, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x2b, 0x19,
	0x71, 0xf1, 0x42, 0xd5, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x29, 0x72, 0xf1, 0x40, 0xf4,
	0xa7, 0xc4, 0x23, 0x29, 0xe6, 0x86, 0x8a, 0x85, 0xa4, 0x56, 0x94, 0x18, 0x39, 0x73, 0xb1, 0x07,
	0x43, 0xac, 0x10, 0xb2, 0xe0, 0x62, 0x05, 0x33, 0x85, 0x44, 0xf5, 0x60, 0x8e, 0x40, 0xb6, 0x52,
	0x4a, 0x0c, 0x5d, 0x18, 0x62, 0x8b, 0x12, 0x83, 0x93, 0x46, 0x94, 0x5a, 0x7a, 0x66, 0x49, 0x46,
	0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x49, 0x62, 0x6a, 0x46, 0xbe, 0x6e, 0x66, 0xbe, 0x7e,
	0x66, 0x4a, 0x8e, 0x7e, 0x7a, 0x6a, 0x9e, 0x7e, 0x7a, 0x3e, 0xcc, 0x57, 0x49, 0x6c, 0x60, 0x6f,
	0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xf8, 0x47, 0x8c, 0xef, 0x00, 0x00, 0x00,
}
