//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: id/id.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Id_IdNewCall: ClientCallUnary {}

fileprivate final class Id_IdNewCallBase: ClientCallUnaryBase<Id_NewRequest, Id_NewResponse>, Id_IdNewCall {
  override class var method: String { return "/id.Id/New" }
}


/// Instantiate Id_IdServiceClient, then call methods of this protocol to make API calls.
internal protocol Id_IdService: ServiceClient {
  /// Synchronous. Unary.
  func new(_ request: Id_NewRequest, metadata customMetadata: Metadata) throws -> Id_NewResponse
  /// Asynchronous. Unary.
  func new(_ request: Id_NewRequest, metadata customMetadata: Metadata, completion: @escaping (Id_NewResponse?, CallResult) -> Void) throws -> Id_IdNewCall

}

internal extension Id_IdService {
  /// Synchronous. Unary.
  func new(_ request: Id_NewRequest) throws -> Id_NewResponse {
    return try self.new(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  func new(_ request: Id_NewRequest, completion: @escaping (Id_NewResponse?, CallResult) -> Void) throws -> Id_IdNewCall {
    return try self.new(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Id_IdServiceClient: ServiceClientBase, Id_IdService {
  /// Synchronous. Unary.
  internal func new(_ request: Id_NewRequest, metadata customMetadata: Metadata) throws -> Id_NewResponse {
    return try Id_IdNewCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  internal func new(_ request: Id_NewRequest, metadata customMetadata: Metadata, completion: @escaping (Id_NewResponse?, CallResult) -> Void) throws -> Id_IdNewCall {
    return try Id_IdNewCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

