//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: slasher/slasher.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Slasher_SlasherSlashCall: ClientCallUnary {}

fileprivate final class Slasher_SlasherSlashCallBase: ClientCallUnaryBase<Slasher_SlashRequest, Slasher_SlashResponse>, Slasher_SlasherSlashCall {
  override class var method: String { return "/slasher.Slasher/Slash" }
}


/// Instantiate Slasher_SlasherServiceClient, then call methods of this protocol to make API calls.
internal protocol Slasher_SlasherService: ServiceClient {
  /// Synchronous. Unary.
  func slash(_ request: Slasher_SlashRequest, metadata customMetadata: Metadata) throws -> Slasher_SlashResponse
  /// Asynchronous. Unary.
  func slash(_ request: Slasher_SlashRequest, metadata customMetadata: Metadata, completion: @escaping (Slasher_SlashResponse?, CallResult) -> Void) throws -> Slasher_SlasherSlashCall

}

internal extension Slasher_SlasherService {
  /// Synchronous. Unary.
  func slash(_ request: Slasher_SlashRequest) throws -> Slasher_SlashResponse {
    return try self.slash(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  func slash(_ request: Slasher_SlashRequest, completion: @escaping (Slasher_SlashResponse?, CallResult) -> Void) throws -> Slasher_SlasherSlashCall {
    return try self.slash(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Slasher_SlasherServiceClient: ServiceClientBase, Slasher_SlasherService {
  /// Synchronous. Unary.
  internal func slash(_ request: Slasher_SlashRequest, metadata customMetadata: Metadata) throws -> Slasher_SlashResponse {
    return try Slasher_SlasherSlashCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  internal func slash(_ request: Slasher_SlashRequest, metadata customMetadata: Metadata, completion: @escaping (Slasher_SlashResponse?, CallResult) -> Void) throws -> Slasher_SlasherSlashCall {
    return try Slasher_SlasherSlashCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

