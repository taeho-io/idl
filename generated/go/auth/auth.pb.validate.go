// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AuthRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 999 {
		return AuthRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 999",
		}
	}

	return nil
}

// AuthRequestValidationError is the validation error returned by
// AuthRequest.Validate if the designated constraints aren't met.
type AuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequestValidationError) ErrorName() string { return "AuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequestValidationError{}

// Validate checks the field values on AuthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AuthResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	// no validation rules for UserId

	return nil
}

// AuthResponseValidationError is the validation error returned by
// AuthResponse.Validate if the designated constraints aren't met.
type AuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResponseValidationError) ErrorName() string { return "AuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResponseValidationError{}

// Validate checks the field values on VerifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VerifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccessToken()) < 30 {
		return VerifyRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 30 runes",
		}
	}

	return nil
}

// VerifyRequestValidationError is the validation error returned by
// VerifyRequest.Validate if the designated constraints aren't met.
type VerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRequestValidationError) ErrorName() string { return "VerifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRequestValidationError{}

// Validate checks the field values on VerifyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VerifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsValid

	return nil
}

// VerifyResponseValidationError is the validation error returned by
// VerifyResponse.Validate if the designated constraints aren't met.
type VerifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyResponseValidationError) ErrorName() string { return "VerifyResponseValidationError" }

// Error satisfies the builtin error interface
func (e VerifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyResponseValidationError{}

// Validate checks the field values on RefreshRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RefreshRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetRefreshToken()) < 30 {
		return RefreshRequestValidationError{
			field:  "RefreshToken",
			reason: "value length must be at least 30 runes",
		}
	}

	return nil
}

// RefreshRequestValidationError is the validation error returned by
// RefreshRequest.Validate if the designated constraints aren't met.
type RefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshRequestValidationError) ErrorName() string { return "RefreshRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshRequestValidationError{}

// Validate checks the field values on RefreshResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RefreshResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	// no validation rules for UserId

	return nil
}

// RefreshResponseValidationError is the validation error returned by
// RefreshResponse.Validate if the designated constraints aren't met.
type RefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshResponseValidationError) ErrorName() string { return "RefreshResponseValidationError" }

// Error satisfies the builtin error interface
func (e RefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshResponseValidationError{}

// Validate checks the field values on ParseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ParseRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAccessToken()) < 30 {
		return ParseRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 30 runes",
		}
	}

	return nil
}

// ParseRequestValidationError is the validation error returned by
// ParseRequest.Validate if the designated constraints aren't met.
type ParseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseRequestValidationError) ErrorName() string { return "ParseRequestValidationError" }

// Error satisfies the builtin error interface
func (e ParseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseRequestValidationError{}

// Validate checks the field values on ParseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ParseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for TokenType

	return nil
}

// ParseResponseValidationError is the validation error returned by
// ParseResponse.Validate if the designated constraints aren't met.
type ParseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseResponseValidationError) ErrorName() string { return "ParseResponseValidationError" }

// Error satisfies the builtin error interface
func (e ParseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseResponseValidationError{}

// Validate checks the field values on JWK with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *JWK) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Kty

	// no validation rules for E

	// no validation rules for N

	return nil
}

// JWKValidationError is the validation error returned by JWK.Validate if the
// designated constraints aren't met.
type JWKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JWKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JWKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JWKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JWKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JWKValidationError) ErrorName() string { return "JWKValidationError" }

// Error satisfies the builtin error interface
func (e JWKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJWK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JWKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JWKValidationError{}

// Validate checks the field values on JwksRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JwksRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// JwksRequestValidationError is the validation error returned by
// JwksRequest.Validate if the designated constraints aren't met.
type JwksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwksRequestValidationError) ErrorName() string { return "JwksRequestValidationError" }

// Error satisfies the builtin error interface
func (e JwksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwksRequestValidationError{}

// Validate checks the field values on JwksResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JwksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JwksResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// JwksResponseValidationError is the validation error returned by
// JwksResponse.Validate if the designated constraints aren't met.
type JwksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwksResponseValidationError) ErrorName() string { return "JwksResponseValidationError" }

// Error satisfies the builtin error interface
func (e JwksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwksResponseValidationError{}
